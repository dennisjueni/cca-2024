# Additionally uses MVA of length 10, this time if statements also check for length 10 correctly
# Additionally check if cpu_percent == 0 and if so we always return False



def schedule_loop(self):
    OVERLOADED_THRESHOLD = 40
    UNDERLOADED_THRESHOLD = 90

    current_job = self.jobs.pop(0)
    current_job.start_container()

    while True:
        curr_job_finished = current_job.is_finished()

        if curr_job_finished:
            if len(self.jobs) == 0:
                # This means we have finished all jobs and we can thus break the loop and let memcached run alone
                self.set_memcached_cores([0, 1])
                break

            # This means we can start the next job in the list and run it
            current_job = self.jobs.pop(0)
            current_job.start_container()

            if self.num_memcached_cores != 1:
                current_job.update_cores([2, 3])
        else:
            if self.num_memcached_cores == 1 and self.is_memcached_overloaded(OVERLOADED_THRESHOLD):
                self.set_memcached_cores([0, 1])
                current_job.update_cores([2, 3])

            elif self.num_memcached_cores == 2 and self.is_memcached_underloaded(UNDERLOADED_THRESHOLD):
                self.set_memcached_cores([0])
                current_job.update_cores([1, 2, 3])

        time.sleep(0.1)

    time.sleep(70)
    self.logger.job_end(JobEnum.MEMCACHED)